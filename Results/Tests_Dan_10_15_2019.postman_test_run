{
	"id": "575436e7-3cf9-41a8-b03e-a096f41f08ee",
	"name": "Tests",
	"allTests": [],
	"timestamp": "2019-10-15T10:57:16.222Z",
	"collection_id": "bf731b59-3840-41fa-a29b-67303fb155e7",
	"folder_id": 0,
	"target_type": "collection",
	"environment_id": "22c3ff2c-d795-4f1e-82f3-40728539bd05",
	"data": [],
	"delay": 0,
	"count": 1,
	"collection": {
		"id": "bf731b59-3840-41fa-a29b-67303fb155e7",
		"name": "Tests",
		"order": [],
		"folders_order": [
			"dbdfacf4-a79d-446f-a385-cf496da6efb4",
			"f8120b60-5ef0-4f72-93aa-103dde9aa6d7",
			"2258fe80-f6f3-4ff4-848e-7bbb40c4f1d8",
			"67c6e75c-a984-4d87-b72f-792987d37015",
			"7c526492-b038-48b2-8df2-07b0e944dc0c",
			"9b212e81-747a-4a0a-81a1-851b8aba3f5c",
			"2f2a9dcf-b9ea-4388-ab99-9a640e99cdfb",
			"bcd0a8c3-62db-456d-9174-f31f2459af84",
			"5cbc7497-be76-41bc-8835-638f7e707d55",
			"414fefb6-b75a-4ac0-8116-dae5bff19d06",
			"1688fbbb-1ff3-45a0-8e57-2028ee2f913a",
			"3c1fcbbe-b167-4baa-9a9a-a46fa1dac239",
			"8f18a4d4-58f7-43e9-85cc-22ebb1ff5d20",
			"d584e4d6-4923-4179-a415-73183ac4d8aa",
			"0ce2b084-1fe4-45ac-8638-5ec4fe9c32f4",
			"dab8bb06-b9b0-4bbd-b987-4fc4abc8cd0e",
			"44a48c64-05e8-48f9-97b6-17a31ed432b4"
		],
		"isFavorite": false
	},
	"folder": null,
	"environment": null,
	"globals": [],
	"results": [
		{
			"name": "Refresh_token",
			"id": "5fb36962-dc68-403e-80c8-f10335ec112f",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"46"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "46",
			"totalRequestTime": "46",
			"iterationResults": {}
		},
		{
			"name": "Get an album",
			"id": "3a1e8fc2-8544-4472-a139-6a271c0dd941",
			"url": "https://api.spotify.com/v1/albums/0O82niJ0NpcptYRxogeEZu",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Album is correct": true,
				"Validate JSON schema": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Album is correct": {
					"pass": 1,
					"fail": 0
				},
				"Validate JSON schema": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Album is correct": true,
					"Validate JSON schema": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get an album's tracks",
			"id": "53afffe7-2db1-4d5f-a497-c78564217840",
			"url": "https://api.spotify.com/v1/albums/6R6nH5TVNEquzoNfqCPLaB/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Album is correct": true,
				"Validate JSON schema": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Album is correct": {
					"pass": 1,
					"fail": 0
				},
				"Validate JSON schema": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Album is correct": true,
					"Validate JSON schema": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get an album negative",
			"id": "de8404ea-1b1c-4b97-aef4-b9377fa6db4f",
			"url": "https://api.spotify.com/v1/albums/invalid",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Invalid ID, status code 400": true
			},
			"testPassFailCounts": {
				"Invalid ID, status code 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"42"
			],
			"allTests": [
				{
					"Invalid ID, status code 400": true
				}
			],
			"time": "42",
			"totalRequestTime": "42",
			"iterationResults": {}
		},
		{
			"name": "Get an album's tracks Negative",
			"id": "4a238a1e-959e-4246-bf47-f15fd9e07c06",
			"url": "https://api.spotify.com/v1/albums/785968/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Invalid ID, status code 400": true
			},
			"testPassFailCounts": {
				"Invalid ID, status code 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"41"
			],
			"allTests": [
				{
					"Invalid ID, status code 400": true
				}
			],
			"time": "41",
			"totalRequestTime": "41",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "fb8aee9a-41ff-4ea4-9f94-6acb819e56b8",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"49"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "49",
			"totalRequestTime": "49",
			"iterationResults": {}
		},
		{
			"name": "Get an Artist's Albums",
			"id": "00c7e47d-5b6f-4617-a079-7542f0e290ef",
			"url": "https://api.spotify.com/v1/artists/6wWVKhxIU2cEi0K81v7HvP/albums",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Artist is correct": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Artist is correct": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"53"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Artist is correct": true
				}
			],
			"time": "53",
			"totalRequestTime": "53",
			"iterationResults": {}
		},
		{
			"name": "Get an Artist's Albums Negative",
			"id": "d4b86c29-7594-44f7-9c94-48a6b7e91173",
			"url": "https://api.spotify.com/v1/artists/1234abc/albums",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Artist is incorect": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Artist is incorect": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"42"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Artist is incorect": true
				}
			],
			"time": "42",
			"totalRequestTime": "42",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "7ab94ed2-b24a-4bd1-b1f0-af6fc7b6b4f4",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get a category",
			"id": "d0cb3f46-abeb-4ea5-b17d-3835dcd4b184",
			"url": "https://api.spotify.com/v1/browse/categories/party",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Category is correct": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Category is correct": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"46"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Category is correct": true
				}
			],
			"time": "46",
			"totalRequestTime": "46",
			"iterationResults": {}
		},
		{
			"name": "Get a category negative",
			"id": "3225e6c6-c2fc-404d-8268-a616943115db",
			"url": "https://api.spotify.com/v1/browse/categories/1234",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"tests": {
				"Response is ok, status code 404": true,
				"Category is incorrect": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 404": {
					"pass": 1,
					"fail": 0
				},
				"Category is incorrect": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"64"
			],
			"allTests": [
				{
					"Response is ok, status code 404": true,
					"Category is incorrect": true
				}
			],
			"time": "64",
			"totalRequestTime": "64",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "b50df620-1366-4632-be5e-d93b162600f8",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get the user's followed artists",
			"id": "b4671e50-615d-4da6-be41-f067d74a8007",
			"url": "https://api.spotify.com/v1/me/following?type=artist",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"52"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Property is present": true
				}
			],
			"time": "52",
			"totalRequestTime": "52",
			"iterationResults": {}
		},
		{
			"name": "Get the user's followed artists negative",
			"id": "6b957f2e-f04c-4847-aaa9-97e0d09b7283",
			"url": "https://api.spotify.com/v1/me/following",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"38"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Property is present": true
				}
			],
			"time": "38",
			"totalRequestTime": "38",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "4ace7fda-4867-4323-9ad9-1b5a1b29d0c1",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"49"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "49",
			"totalRequestTime": "49",
			"iterationResults": {}
		},
		{
			"name": "Follow artists",
			"id": "5645a535-d93d-4549-afcc-285804ddda14",
			"url": "https://api.spotify.com/v1/me/following?type=artist&ids=3hE8S8ohRErocpkY7uJW4a,6wWVKhxIU2cEi0K81v7HvP",
			"totalTime": 0,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": {
					"name": "No Content",
					"detail": "The server successfully processed the request, but is not returning any content."
				}
			},
			"tests": {
				"Response is ok, status code 204": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"58"
			],
			"allTests": [
				{
					"Response is ok, status code 204": true
				}
			],
			"time": "58",
			"totalRequestTime": "58",
			"iterationResults": {}
		},
		{
			"name": "Check if current user follows users",
			"id": "ba80be11-ac2e-4e06-b0aa-dc8a4f1d773e",
			"url": "https://api.spotify.com/v1/me/following/contains?type=user&ids=winterlord22",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Property is present": true,
				"Validate JSON schema": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				},
				"Validate JSON schema": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"48"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Property is present": true,
					"Validate JSON schema": true
				}
			],
			"time": "48",
			"totalRequestTime": "48",
			"iterationResults": {}
		},
		{
			"name": "Unfolow an artist",
			"id": "5a4eef80-44ae-4215-8f13-a41af0cd7fd5",
			"url": "https://api.spotify.com/v1/me/following?type=artist&ids=6wWVKhxIU2cEi0K81v7HvP",
			"totalTime": 0,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": {
					"name": "No Content",
					"detail": "The server successfully processed the request, but is not returning any content."
				}
			},
			"tests": {
				"Response is ok, status code 204": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"56"
			],
			"allTests": [
				{
					"Response is ok, status code 204": true
				}
			],
			"time": "56",
			"totalRequestTime": "56",
			"iterationResults": {}
		},
		{
			"name": "Follow artists negative",
			"id": "1b79b8ee-d2ea-429a-b24b-12fd76948155",
			"url": "https://api.spotify.com/v1/me/following?type=artist&ids=nvalidi",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Invalid aritist id!": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Invalid aritist id!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"40"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Invalid aritist id!": true
				}
			],
			"time": "40",
			"totalRequestTime": "40",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "b49bb64d-477c-4395-8b92-f8889572e6c6",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"49"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "49",
			"totalRequestTime": "49",
			"iterationResults": {}
		},
		{
			"name": "Get top artists",
			"id": "73906aa9-d8a7-420b-9fa2-470b8537c927",
			"url": "https://api.spotify.com/v1/me/top/artists",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"46"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Property is present": true
				}
			],
			"time": "46",
			"totalRequestTime": "46",
			"iterationResults": {}
		},
		{
			"name": "Get top tracks",
			"id": "caff5977-b348-4910-84e3-e21ee50236ed",
			"url": "https://api.spotify.com/v1/me/top/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"58"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Property is present": true
				}
			],
			"time": "58",
			"totalRequestTime": "58",
			"iterationResults": {}
		},
		{
			"name": "Get top negative",
			"id": "fe4d461b-0b53-4e76-a3e9-3d21de61dbb7",
			"url": "https://api.spotify.com/v1/me/top",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"tests": {
				"Response is ok, status code 404": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"38"
			],
			"allTests": [
				{
					"Response is ok, status code 404": true
				}
			],
			"time": "38",
			"totalRequestTime": "38",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "8379bda8-e37c-4d14-8c54-f27d46ca0265",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"49"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "49",
			"totalRequestTime": "49",
			"iterationResults": {}
		},
		{
			"name": "Get recent played tracks",
			"id": "2eb157cf-9e45-4ab5-9909-d9dd3ffa300d",
			"url": "https://api.spotify.com/v1/me/player/recently-played",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"72"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "72",
			"totalRequestTime": "72",
			"iterationResults": {}
		},
		{
			"name": "Set repeat mode on user's playback",
			"id": "efcac18b-f9c3-49db-9dc8-e837f6d4ccc0",
			"url": "https://api.spotify.com/v1/me/player/repeat",
			"totalTime": 0,
			"responseCode": {
				"code": 403,
				"name": "Forbidden",
				"detail": {
					"name": "Forbidden",
					"detail": "The request was a legal request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference."
				}
			},
			"tests": {
				"Response is ok, status code 403": true,
				"Premium is needed": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 403": {
					"pass": 1,
					"fail": 0
				},
				"Premium is needed": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"40"
			],
			"allTests": [
				{
					"Response is ok, status code 403": true,
					"Premium is needed": true
				}
			],
			"time": "40",
			"totalRequestTime": "40",
			"iterationResults": {}
		},
		{
			"name": "Set repeat mode on user's playback negative",
			"id": "ae043be8-8dd6-47c7-9c71-0fbcbf04e7b6",
			"url": "https://api.spotify.com/v1/me/player/123",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"tests": {
				"Response is ok, status code 404": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"38"
			],
			"allTests": [
				{
					"Response is ok, status code 404": true
				}
			],
			"time": "38",
			"totalRequestTime": "38",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "b35aaf63-b311-4081-be74-ade13fcd6d5b",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"50"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "50",
			"totalRequestTime": "50",
			"iterationResults": {}
		},
		{
			"name": "Create a playlist",
			"id": "c40453cf-98b4-4aa1-bc54-2baa5455a4d8",
			"url": "https://api.spotify.com/v1/users/dqq9tx6bjmkcj92igedo2j19n/playlists/",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"tests": {
				"Playlist was created, status code 201": true,
				"The Playlist was created": true
			},
			"testPassFailCounts": {
				"Playlist was created, status code 201": {
					"pass": 1,
					"fail": 0
				},
				"The Playlist was created": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"85"
			],
			"allTests": [
				{
					"Playlist was created, status code 201": true,
					"The Playlist was created": true
				}
			],
			"time": "85",
			"totalRequestTime": "85",
			"iterationResults": {}
		},
		{
			"name": "Add tracks to a playlist",
			"id": "75369d08-4838-4feb-80fa-122a9823be0f",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"tests": {
				"Tracks added to playlist, status code 201": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Tracks added to playlist, status code 201": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"80"
			],
			"allTests": [
				{
					"Tracks added to playlist, status code 201": true,
					"Property is present": true
				}
			],
			"time": "80",
			"totalRequestTime": "80",
			"iterationResults": {}
		},
		{
			"name": "Remove tracks from a playlist",
			"id": "69f37a8d-4061-4cc6-8afa-a1c1878de30f",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"The tracks were deleted, status code 200": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"The tracks were deleted, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"68"
			],
			"allTests": [
				{
					"The tracks were deleted, status code 200": true,
					"Property is present": true
				}
			],
			"time": "68",
			"totalRequestTime": "68",
			"iterationResults": {}
		},
		{
			"name": "Change a playlists name and description",
			"id": "686df7a7-4748-4558-92a1-4e9c6d8afb40",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"The name and description were changed, status code 200": true
			},
			"testPassFailCounts": {
				"The name and description were changed, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"149"
			],
			"allTests": [
				{
					"The name and description were changed, status code 200": true
				}
			],
			"time": "149",
			"totalRequestTime": "149",
			"iterationResults": {}
		},
		{
			"name": "Add tracks to a playlist negative",
			"id": "bf13215a-a831-4d50-bd7a-6929cb767308",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Tracks added to playlist, status code 400": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Tracks added to playlist, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"40"
			],
			"allTests": [
				{
					"Tracks added to playlist, status code 400": true,
					"Property is present": true
				}
			],
			"time": "40",
			"totalRequestTime": "40",
			"iterationResults": {}
		},
		{
			"name": "Remove tracks from a playlist negative",
			"id": "1845ba63-da5a-4439-997e-5ee3b3e8cc45",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"The tracks were deleted, status code 400": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"The tracks were deleted, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"44"
			],
			"allTests": [
				{
					"The tracks were deleted, status code 400": true,
					"Property is present": true
				}
			],
			"time": "44",
			"totalRequestTime": "44",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "6c9c980d-bf3f-4752-ac8d-a336964257d0",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get a playlist's cover image",
			"id": "eef124da-8527-4459-acc6-3f3e39767b6a",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/images",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Image is available!": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Image is available!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"63"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Image is available!": true
				}
			],
			"time": "63",
			"totalRequestTime": "63",
			"iterationResults": {}
		},
		{
			"name": "Get a playlist's cover image negative",
			"id": "fa510d41-6c21-4f3a-b7ba-b2be80dfea8b",
			"url": "https://api.spotify.com/v1/playlists/wrong/images",
			"totalTime": 0,
			"responseCode": {
				"code": 502,
				"name": "Bad Gateway",
				"detail": {
					"name": "Bad Gateway",
					"detail": "The server was acting as a gateway or proxy and received an invalid response from the upstream server."
				}
			},
			"tests": {
				"Response is ok, status code 502": true,
				"Image is available!": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 502": {
					"pass": 1,
					"fail": 0
				},
				"Image is available!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"44"
			],
			"allTests": [
				{
					"Response is ok, status code 502": true,
					"Image is available!": true
				}
			],
			"time": "44",
			"totalRequestTime": "44",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "916aaea9-5ae0-4eee-bf4f-d8104f8a2cc3",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"52"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "52",
			"totalRequestTime": "52",
			"iterationResults": {}
		},
		{
			"name": "Artist by artist ID_Negative",
			"id": "f371a3da-7ec2-4f69-8b27-14b8d3789b53",
			"url": "https://api.spotify.com/v1/artists/4PoYwGOztIrPpBfRIlMSx",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok. Code 400": true,
				"Invalid id is correctly shown in the error message.": true
			},
			"testPassFailCounts": {
				"Response is ok. Code 400": {
					"pass": 1,
					"fail": 0
				},
				"Invalid id is correctly shown in the error message.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"46"
			],
			"allTests": [
				{
					"Response is ok. Code 400": true,
					"Invalid id is correctly shown in the error message.": true
				}
			],
			"time": "46",
			"totalRequestTime": "46",
			"iterationResults": {}
		},
		{
			"name": "Get an artist's related artists Positive",
			"id": "8d1beed0-3ce4-4205-9486-01929fd235be",
			"url": "https://api.spotify.com/v1/artists/3hE8S8ohRErocpkY7uJW4a/related-artists",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok. Code 200": true
			},
			"testPassFailCounts": {
				"Response is ok. Code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"55"
			],
			"allTests": [
				{
					"Response is ok. Code 200": true
				}
			],
			"time": "55",
			"totalRequestTime": "55",
			"iterationResults": {}
		},
		{
			"name": "Get an artist's related artists Negative",
			"id": "87a7a470-3f9b-4bef-958a-8f2575fc0366",
			"url": "https://api.spotify.com/v1/artists/4PoYwGOztIrPpBfRIlMSx/related-artists",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok. Code 400": true,
				"Invalid id is correctly shown in the error message.": true
			},
			"testPassFailCounts": {
				"Response is ok. Code 400": {
					"pass": 1,
					"fail": 0
				},
				"Invalid id is correctly shown in the error message.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"41"
			],
			"allTests": [
				{
					"Response is ok. Code 400": true,
					"Invalid id is correctly shown in the error message.": true
				}
			],
			"time": "41",
			"totalRequestTime": "41",
			"iterationResults": {}
		},
		{
			"name": "Artist by artist ID_Positive",
			"id": "938bbe61-9f87-4e10-912d-1f52851dd851",
			"url": "https://api.spotify.com/v1/artists/3hE8S8ohRErocpkY7uJW4a?=",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok. Code 200": true
			},
			"testPassFailCounts": {
				"Response is ok. Code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"42"
			],
			"allTests": [
				{
					"Response is ok. Code 200": true
				}
			],
			"time": "42",
			"totalRequestTime": "42",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "3b95704d-f3d5-4b41-9cb0-ff4ea4e2e48d",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"49"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "49",
			"totalRequestTime": "49",
			"iterationResults": {}
		},
		{
			"name": "Get_Recomendations_Retesting",
			"id": "48d3a3f7-690a-422e-8030-8e1885f82c4f",
			"url": "https://api.spotify.com/v1/recommendations?limit=100&seed_artists=7fWgqc4HJi3pcHhK8hKg2p&market=US",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"130"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "130",
			"totalRequestTime": "130",
			"iterationResults": {}
		},
		{
			"name": "Get a list of new releases_Positive_BVA_50_limit",
			"id": "20a8b077-5d55-4f8b-8a60-fbbeba281cfd",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&limit=50",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"The schema is valid.": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"The schema is valid.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"41"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"The schema is valid.": true
				}
			],
			"time": "41",
			"totalRequestTime": "41",
			"iterationResults": {}
		},
		{
			"name": "Get a list of new releases_Negative_BVA_51_limit",
			"id": "d947139d-5768-4109-a8df-2026e1385753",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&limit=51",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Response URL correctly throws the error": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Response URL correctly throws the error": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"40"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Response URL correctly throws the error": true
				}
			],
			"time": "40",
			"totalRequestTime": "40",
			"iterationResults": {}
		},
		{
			"name": "Get a list of categories_Positive_BVA_50_limit Copy",
			"id": "e08588b2-b6ec-401f-806b-b6f11d1b354b",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&locale=ro_EN&limit=50",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"62"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "62",
			"totalRequestTime": "62",
			"iterationResults": {}
		},
		{
			"name": "Get a list of categories Negative-BVA_Above_50_Limit",
			"id": "f83de355-7bc6-4400-9afa-9a9606ea0af2",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&locale=ro_EN&limit=51",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Response URL correctly throws the error": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Response URL correctly throws the error": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"78"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Response URL correctly throws the error": true
				}
			],
			"time": "78",
			"totalRequestTime": "78",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "57166496-d190-40aa-8e39-16c1a77448cc",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Save an album for the current user",
			"id": "53b1882b-575a-4c3d-a0bc-7842ff963254",
			"url": "https://api.spotify.com/v1/me/albums?ids=4acB71ZhsfYGdTdqdbpzLK",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"51"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "51",
			"totalRequestTime": "51",
			"iterationResults": {}
		},
		{
			"name": "Check user's saved albums",
			"id": "828de01b-0422-49f5-8b8c-909f54252e81",
			"url": "https://api.spotify.com/v1/me/albums/contains?contains=&ids=4acB71ZhsfYGdTdqdbpzLK,1JifWi3bCvGr7MsdHYumjD",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Correct assertion. First album is present the second is not.": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Correct assertion. First album is present the second is not.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"44"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Correct assertion. First album is present the second is not.": true
				}
			],
			"time": "44",
			"totalRequestTime": "44",
			"iterationResults": {}
		},
		{
			"name": "Check user's saved albums Negative_test",
			"id": "4d2c70a8-6695-457f-8bf8-b77c8a7577d5",
			"url": "https://api.spotify.com/v1/me/albums/contains?contains=&ids=1JifWi3bCvGr7MsdHYumj,4acB71ZhsfYGdTdqdbpzL",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Error message is contained. Bad ids": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Error message is contained. Bad ids": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"39"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Error message is contained. Bad ids": true
				}
			],
			"time": "39",
			"totalRequestTime": "39",
			"iterationResults": {}
		},
		{
			"name": "Remove Albums fro Current User",
			"id": "2e76dc5c-eece-44e1-bed8-2919d72703dd",
			"url": "https://api.spotify.com/v1/me/albums?ids=1SL2IdaCrXDtv695Px6AXR",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"53"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "53",
			"totalRequestTime": "53",
			"iterationResults": {}
		},
		{
			"name": "Remove Albums fro Current User Negative_Test",
			"id": "e87ecf82-c477-49bf-a7e8-0b8dff9434fc",
			"url": "https://api.spotify.com/v1/me/albums?ids=1JifWi3bCvGr7MsdHYumj,4acB71ZhsfYGdTdqdbpzL",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Error message is contained. Bad ids": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Error message is contained. Bad ids": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"43"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Error message is contained. Bad ids": true
				}
			],
			"time": "43",
			"totalRequestTime": "43",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "25b57009-5b73-4545-8f14-ba17c712e0a4",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"48"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "48",
			"totalRequestTime": "48",
			"iterationResults": {}
		},
		{
			"name": "Save Tracks for User Positive test",
			"id": "e199775b-83e8-459b-acc5-5484d10b2de8",
			"url": "https://api.spotify.com/v1/me/tracks?ids=5hyb6e5o5dPm7wbUi5wlhb,0lqfBvf1Gqmmt3l5Qeirlm",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response 200. Response ok.": true
			},
			"testPassFailCounts": {
				"Response 200. Response ok.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"58"
			],
			"allTests": [
				{
					"Response 200. Response ok.": true
				}
			],
			"time": "58",
			"totalRequestTime": "58",
			"iterationResults": {}
		},
		{
			"name": "Save Tracks for User Negative test",
			"id": "9b768b8a-0766-4134-a374-e8aecba15176",
			"url": "https://api.spotify.com/v1/me/tracks?ids={{to_add_tracks_negative}}",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response 400. Response is correct.": true,
				"Error message found in JSON response.": true
			},
			"testPassFailCounts": {
				"Response 400. Response is correct.": {
					"pass": 1,
					"fail": 0
				},
				"Error message found in JSON response.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"42"
			],
			"allTests": [
				{
					"Response 400. Response is correct.": true,
					"Error message found in JSON response.": true
				}
			],
			"time": "42",
			"totalRequestTime": "42",
			"iterationResults": {}
		},
		{
			"name": "Save Albums for Current User Positive test",
			"id": "612b46eb-4960-4590-8dae-c53aa8ae0d75",
			"url": "https://api.spotify.com/v1/me/albums?ids=6R6nH5TVNEquzoNfqCPLaB,0O82niJ0NpcptYRxogeEZu",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response 200. Response ok.": true
			},
			"testPassFailCounts": {
				"Response 200. Response ok.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"60"
			],
			"allTests": [
				{
					"Response 200. Response ok.": true
				}
			],
			"time": "60",
			"totalRequestTime": "60",
			"iterationResults": {}
		},
		{
			"name": "Save Albums for Current Negative test",
			"id": "ee808df8-9cde-4b44-b200-d99db2b4d71d",
			"url": "https://api.spotify.com/v1/me/albums?ids={{save_album_ids_negative}}",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response 400. Response is correct.": true,
				"Error message found in JSON response.": true
			},
			"testPassFailCounts": {
				"Response 400. Response is correct.": {
					"pass": 1,
					"fail": 0
				},
				"Error message found in JSON response.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"44"
			],
			"allTests": [
				{
					"Response 400. Response is correct.": true,
					"Error message found in JSON response.": true
				}
			],
			"time": "44",
			"totalRequestTime": "44",
			"iterationResults": {}
		},
		{
			"name": "User's Saved tracks",
			"id": "e6b6ad2b-8992-4df4-bae8-8e722c3c3fe9",
			"url": "https://api.spotify.com/v1/me/tracks?limit=10",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response 200. Response is correct.": true,
				"The limit is set to 10.": true
			},
			"testPassFailCounts": {
				"Response 200. Response is correct.": {
					"pass": 1,
					"fail": 0
				},
				"The limit is set to 10.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"50"
			],
			"allTests": [
				{
					"Response 200. Response is correct.": true,
					"The limit is set to 10.": true
				}
			],
			"time": "50",
			"totalRequestTime": "50",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "75e96392-155e-4601-8254-37e042a5d1ed",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"54"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "54",
			"totalRequestTime": "54",
			"iterationResults": {}
		},
		{
			"name": "Add_tracks_to_playlist",
			"id": "cb37c71c-1bef-494a-8994-6126618a3fd6",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Snapshot has been generated ==> POST was delivered successfully!": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Snapshot has been generated ==> POST was delivered successfully!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"125"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Snapshot has been generated ==> POST was delivered successfully!": true
				}
			],
			"time": "125",
			"totalRequestTime": "125",
			"iterationResults": {}
		},
		{
			"name": "Add_tracks_to_playlist-Negative-test",
			"id": "8a683554-cc8e-4c01-a4f4-76c5f7203c66",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is correct, status code 400": true,
				"Incorrect track URI detected. Error has been thrown.": true
			},
			"testPassFailCounts": {
				"Response is correct, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Incorrect track URI detected. Error has been thrown.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"44"
			],
			"allTests": [
				{
					"Response is correct, status code 400": true,
					"Incorrect track URI detected. Error has been thrown.": true
				}
			],
			"time": "44",
			"totalRequestTime": "44",
			"iterationResults": {}
		},
		{
			"name": "Replace a playlist's tracks",
			"id": "4be240c1-3c7b-43ae-9a75-2a1de3f62808",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Snapshot has been generated ==> POST was delivered successfully!": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Snapshot has been generated ==> POST was delivered successfully!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"63"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Snapshot has been generated ==> POST was delivered successfully!": true
				}
			],
			"time": "63",
			"totalRequestTime": "63",
			"iterationResults": {}
		},
		{
			"name": "Replace a playlist's tracks Negative_Test",
			"id": "1dd8980c-0293-47c0-abee-d533a2d402eb",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is correct, status code 400": true,
				"Incorrect track URI detected. Error has been thrown.": true
			},
			"testPassFailCounts": {
				"Response is correct, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Incorrect track URI detected. Error has been thrown.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"43"
			],
			"allTests": [
				{
					"Response is correct, status code 400": true,
					"Incorrect track URI detected. Error has been thrown.": true
				}
			],
			"time": "43",
			"totalRequestTime": "43",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "84af30a8-bd9c-4144-9d17-f031fbc04029",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"49"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "49",
			"totalRequestTime": "49",
			"iterationResults": {}
		},
		{
			"name": "Search for an item Positive-BVA_50_limit",
			"id": "9dcd512f-a6e5-4e23-a069-2a52151d6696",
			"url": "https://api.spotify.com/v1/search?q=joe satriani&type=album&market=RO&limit=50",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok. Code 200": true
			},
			"testPassFailCounts": {
				"Response is ok. Code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"102"
			],
			"allTests": [
				{
					"Response is ok. Code 200": true
				}
			],
			"time": "102",
			"totalRequestTime": "102",
			"iterationResults": {}
		},
		{
			"name": "Search for an item Negative-BVA_51_limit",
			"id": "093ab14e-8140-41a0-b7eb-c14391647ab0",
			"url": "https://api.spotify.com/v1/search?q=joe satriani&type=album&market=RO&limit=51",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok. Code 400": true,
				"Response body contains the message Invalid limit.": true
			},
			"testPassFailCounts": {
				"Response is ok. Code 400": {
					"pass": 1,
					"fail": 0
				},
				"Response body contains the message Invalid limit.": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"42"
			],
			"allTests": [
				{
					"Response is ok. Code 400": true,
					"Response body contains the message Invalid limit.": true
				}
			],
			"time": "42",
			"totalRequestTime": "42",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "ffe18c90-a8e8-4f9b-b240-9941d1862e04",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get audio analysis for a track",
			"id": "b421c325-1818-4630-90c7-4b1558b02d98",
			"url": "https://api.spotify.com/v1/audio-analysis/5hyb6e5o5dPm7wbUi5wlhb",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"153"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Property is present": true
				}
			],
			"time": "153",
			"totalRequestTime": "153",
			"iterationResults": {}
		},
		{
			"name": "Get audio features for a track",
			"id": "adf184e9-c91f-4e6e-8619-2a6a35030c75",
			"url": "https://api.spotify.com/v1/audio-features/0lqfBvf1Gqmmt3l5Qeirlm",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"38"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true,
					"Property is present": true
				}
			],
			"time": "38",
			"totalRequestTime": "38",
			"iterationResults": {}
		},
		{
			"name": "Get a track negative",
			"id": "12f9c584-8647-46d5-a0c2-8f113c07ddef",
			"url": "https://api.spotify.com/v1/tracks/invalid",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Response is ok, status code 400": true,
				"Property is present": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"42"
			],
			"allTests": [
				{
					"Response is ok, status code 400": true,
					"Property is present": true
				}
			],
			"time": "42",
			"totalRequestTime": "42",
			"iterationResults": {}
		},
		{
			"name": "Refresh_token",
			"id": "45621733-c21e-435d-afb1-5c189af3bf9e",
			"url": "https://accounts.spotify.com/api/token",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"Response is ok, status code 200": true
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"47"
			],
			"allTests": [
				{
					"Response is ok, status code 200": true
				}
			],
			"time": "47",
			"totalRequestTime": "47",
			"iterationResults": {}
		},
		{
			"name": "Get current user's profile",
			"id": "ed0a5a5c-01f1-4380-80cd-e54dd991c974",
			"url": "https://api.spotify.com/v1/me",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"The current user's profile, status code 200": true,
				"The current user was shown!": true
			},
			"testPassFailCounts": {
				"The current user's profile, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"The current user was shown!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"48"
			],
			"allTests": [
				{
					"The current user's profile, status code 200": true,
					"The current user was shown!": true
				}
			],
			"time": "48",
			"totalRequestTime": "48",
			"iterationResults": {}
		},
		{
			"name": "Get a user's profile",
			"id": "bb6888d4-bb4d-46f8-a28d-d31e848135a4",
			"url": "https://api.spotify.com/v1/users/winterlord22",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"The user's profile, status code 200": true,
				"The user was shown!": true
			},
			"testPassFailCounts": {
				"The user's profile, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"The user was shown!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"45"
			],
			"allTests": [
				{
					"The user's profile, status code 200": true,
					"The user was shown!": true
				}
			],
			"time": "45",
			"totalRequestTime": "45",
			"iterationResults": {}
		},
		{
			"name": "Get a user's profile negative",
			"id": "5c7cf4c9-31e2-4d21-b6ef-6628958601f9",
			"url": "https://api.spotify.com/v1/users/winterlord22",
			"totalTime": 0,
			"responseCode": {
				"code": 401,
				"name": "Unauthorized",
				"detail": {
					"name": "Unauthorized",
					"detail": "Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource."
				}
			},
			"tests": {
				"The user's profile, status code 401": true,
				"The user was not shown!": true
			},
			"testPassFailCounts": {
				"The user's profile, status code 401": {
					"pass": 1,
					"fail": 0
				},
				"The user was not shown!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"36"
			],
			"allTests": [
				{
					"The user's profile, status code 401": true,
					"The user was not shown!": true
				}
			],
			"time": "36",
			"totalRequestTime": "36",
			"iterationResults": {}
		},
		{
			"name": "Get current user's profile negative",
			"id": "dd3938b6-8bc4-4adb-8916-8eaa438e4ad4",
			"url": "https://api.spotify.com/v1/me",
			"totalTime": 0,
			"responseCode": {
				"code": 401,
				"name": "Unauthorized",
				"detail": {
					"name": "Unauthorized",
					"detail": "Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource."
				}
			},
			"tests": {
				"The current user's profile, status code 401": true,
				"The current user was not shown!": true
			},
			"testPassFailCounts": {
				"The current user's profile, status code 401": {
					"pass": 1,
					"fail": 0
				},
				"The current user was not shown!": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				"35"
			],
			"allTests": [
				{
					"The current user's profile, status code 401": true,
					"The current user was not shown!": true
				}
			],
			"time": "35",
			"totalRequestTime": "35",
			"iterationResults": {}
		}
	],
	"totalPass": 123,
	"totalFail": 0,
	"totalTime": 4200,
	"lifecycle": "done",
	"requests": [
		{
			"name": "Refresh_token",
			"id": "5fb36962-dc68-403e-80c8-f10335ec112f",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an album",
			"id": "3a1e8fc2-8544-4472-a139-6a271c0dd941",
			"url": "https://api.spotify.com/v1/albums/0O82niJ0NpcptYRxogeEZu",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Album is correct": {
					"pass": 1,
					"fail": 0
				},
				"Validate JSON schema": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an album's tracks",
			"id": "53afffe7-2db1-4d5f-a497-c78564217840",
			"url": "https://api.spotify.com/v1/albums/6R6nH5TVNEquzoNfqCPLaB/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Album is correct": {
					"pass": 1,
					"fail": 0
				},
				"Validate JSON schema": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an album negative",
			"id": "de8404ea-1b1c-4b97-aef4-b9377fa6db4f",
			"url": "https://api.spotify.com/v1/albums/invalid",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Invalid ID, status code 400": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an album's tracks Negative",
			"id": "4a238a1e-959e-4246-bf47-f15fd9e07c06",
			"url": "https://api.spotify.com/v1/albums/785968/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Invalid ID, status code 400": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "fb8aee9a-41ff-4ea4-9f94-6acb819e56b8",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an Artist's Albums",
			"id": "00c7e47d-5b6f-4617-a079-7542f0e290ef",
			"url": "https://api.spotify.com/v1/artists/6wWVKhxIU2cEi0K81v7HvP/albums",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Artist is correct": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an Artist's Albums Negative",
			"id": "d4b86c29-7594-44f7-9c94-48a6b7e91173",
			"url": "https://api.spotify.com/v1/artists/1234abc/albums",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Artist is incorect": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "7ab94ed2-b24a-4bd1-b1f0-af6fc7b6b4f4",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a category",
			"id": "d0cb3f46-abeb-4ea5-b17d-3835dcd4b184",
			"url": "https://api.spotify.com/v1/browse/categories/party",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Category is correct": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a category negative",
			"id": "3225e6c6-c2fc-404d-8268-a616943115db",
			"url": "https://api.spotify.com/v1/browse/categories/1234",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 404": {
					"pass": 1,
					"fail": 0
				},
				"Category is incorrect": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "b50df620-1366-4632-be5e-d93b162600f8",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get the user's followed artists",
			"id": "b4671e50-615d-4da6-be41-f067d74a8007",
			"url": "https://api.spotify.com/v1/me/following?type=artist",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get the user's followed artists negative",
			"id": "6b957f2e-f04c-4847-aaa9-97e0d09b7283",
			"url": "https://api.spotify.com/v1/me/following",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "4ace7fda-4867-4323-9ad9-1b5a1b29d0c1",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Follow artists",
			"id": "5645a535-d93d-4549-afcc-285804ddda14",
			"url": "https://api.spotify.com/v1/me/following?type=artist&ids=3hE8S8ohRErocpkY7uJW4a,6wWVKhxIU2cEi0K81v7HvP",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": {
					"name": "No Content",
					"detail": "The server successfully processed the request, but is not returning any content."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 204": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Check if current user follows users",
			"id": "ba80be11-ac2e-4e06-b0aa-dc8a4f1d773e",
			"url": "https://api.spotify.com/v1/me/following/contains?type=user&ids=winterlord22",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				},
				"Validate JSON schema": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Unfolow an artist",
			"id": "5a4eef80-44ae-4215-8f13-a41af0cd7fd5",
			"url": "https://api.spotify.com/v1/me/following?type=artist&ids=6wWVKhxIU2cEi0K81v7HvP",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": {
					"name": "No Content",
					"detail": "The server successfully processed the request, but is not returning any content."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 204": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Follow artists negative",
			"id": "1b79b8ee-d2ea-429a-b24b-12fd76948155",
			"url": "https://api.spotify.com/v1/me/following?type=artist&ids=nvalidi",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Invalid aritist id!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "b49bb64d-477c-4395-8b92-f8889572e6c6",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get top artists",
			"id": "73906aa9-d8a7-420b-9fa2-470b8537c927",
			"url": "https://api.spotify.com/v1/me/top/artists",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get top tracks",
			"id": "caff5977-b348-4910-84e3-e21ee50236ed",
			"url": "https://api.spotify.com/v1/me/top/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get top negative",
			"id": "fe4d461b-0b53-4e76-a3e9-3d21de61dbb7",
			"url": "https://api.spotify.com/v1/me/top",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 404": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "8379bda8-e37c-4d14-8c54-f27d46ca0265",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get recent played tracks",
			"id": "2eb157cf-9e45-4ab5-9909-d9dd3ffa300d",
			"url": "https://api.spotify.com/v1/me/player/recently-played",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Set repeat mode on user's playback",
			"id": "efcac18b-f9c3-49db-9dc8-e837f6d4ccc0",
			"url": "https://api.spotify.com/v1/me/player/repeat",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 403,
				"name": "Forbidden",
				"detail": {
					"name": "Forbidden",
					"detail": "The request was a legal request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 403": {
					"pass": 1,
					"fail": 0
				},
				"Premium is needed": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Set repeat mode on user's playback negative",
			"id": "ae043be8-8dd6-47c7-9c71-0fbcbf04e7b6",
			"url": "https://api.spotify.com/v1/me/player/123",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 404": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "b35aaf63-b311-4081-be74-ade13fcd6d5b",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Create a playlist",
			"id": "c40453cf-98b4-4aa1-bc54-2baa5455a4d8",
			"url": "https://api.spotify.com/v1/users/dqq9tx6bjmkcj92igedo2j19n/playlists/",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"testPassFailCounts": {
				"Playlist was created, status code 201": {
					"pass": 1,
					"fail": 0
				},
				"The Playlist was created": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Add tracks to a playlist",
			"id": "75369d08-4838-4feb-80fa-122a9823be0f",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"testPassFailCounts": {
				"Tracks added to playlist, status code 201": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Remove tracks from a playlist",
			"id": "69f37a8d-4061-4cc6-8afa-a1c1878de30f",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"The tracks were deleted, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Change a playlists name and description",
			"id": "686df7a7-4748-4558-92a1-4e9c6d8afb40",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"The name and description were changed, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Add tracks to a playlist negative",
			"id": "bf13215a-a831-4d50-bd7a-6929cb767308",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Tracks added to playlist, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Remove tracks from a playlist negative",
			"id": "1845ba63-da5a-4439-997e-5ee3b3e8cc45",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"The tracks were deleted, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "6c9c980d-bf3f-4752-ac8d-a336964257d0",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a playlist's cover image",
			"id": "eef124da-8527-4459-acc6-3f3e39767b6a",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/images",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Image is available!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a playlist's cover image negative",
			"id": "fa510d41-6c21-4f3a-b7ba-b2be80dfea8b",
			"url": "https://api.spotify.com/v1/playlists/wrong/images",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 502,
				"name": "Bad Gateway",
				"detail": {
					"name": "Bad Gateway",
					"detail": "The server was acting as a gateway or proxy and received an invalid response from the upstream server."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 502": {
					"pass": 1,
					"fail": 0
				},
				"Image is available!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "916aaea9-5ae0-4eee-bf4f-d8104f8a2cc3",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Artist by artist ID_Negative",
			"id": "f371a3da-7ec2-4f69-8b27-14b8d3789b53",
			"url": "https://api.spotify.com/v1/artists/4PoYwGOztIrPpBfRIlMSx",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok. Code 400": {
					"pass": 1,
					"fail": 0
				},
				"Invalid id is correctly shown in the error message.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an artist's related artists Positive",
			"id": "8d1beed0-3ce4-4205-9486-01929fd235be",
			"url": "https://api.spotify.com/v1/artists/3hE8S8ohRErocpkY7uJW4a/related-artists",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok. Code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get an artist's related artists Negative",
			"id": "87a7a470-3f9b-4bef-958a-8f2575fc0366",
			"url": "https://api.spotify.com/v1/artists/4PoYwGOztIrPpBfRIlMSx/related-artists",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok. Code 400": {
					"pass": 1,
					"fail": 0
				},
				"Invalid id is correctly shown in the error message.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Artist by artist ID_Positive",
			"id": "938bbe61-9f87-4e10-912d-1f52851dd851",
			"url": "https://api.spotify.com/v1/artists/3hE8S8ohRErocpkY7uJW4a?=",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok. Code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "3b95704d-f3d5-4b41-9cb0-ff4ea4e2e48d",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get_Recomendations_Retesting",
			"id": "48d3a3f7-690a-422e-8030-8e1885f82c4f",
			"url": "https://api.spotify.com/v1/recommendations?limit=100&seed_artists=7fWgqc4HJi3pcHhK8hKg2p&market=US",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a list of new releases_Positive_BVA_50_limit",
			"id": "20a8b077-5d55-4f8b-8a60-fbbeba281cfd",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&limit=50",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"The schema is valid.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a list of new releases_Negative_BVA_51_limit",
			"id": "d947139d-5768-4109-a8df-2026e1385753",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&limit=51",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Response URL correctly throws the error": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a list of categories_Positive_BVA_50_limit Copy",
			"id": "e08588b2-b6ec-401f-806b-b6f11d1b354b",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&locale=ro_EN&limit=50",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a list of categories Negative-BVA_Above_50_Limit",
			"id": "f83de355-7bc6-4400-9afa-9a9606ea0af2",
			"url": "https://api.spotify.com/v1/browse/categories?country=RO&locale=ro_EN&limit=51",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Response URL correctly throws the error": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "57166496-d190-40aa-8e39-16c1a77448cc",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Save an album for the current user",
			"id": "53b1882b-575a-4c3d-a0bc-7842ff963254",
			"url": "https://api.spotify.com/v1/me/albums?ids=4acB71ZhsfYGdTdqdbpzLK",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Check user's saved albums",
			"id": "828de01b-0422-49f5-8b8c-909f54252e81",
			"url": "https://api.spotify.com/v1/me/albums/contains?contains=&ids=4acB71ZhsfYGdTdqdbpzLK,1JifWi3bCvGr7MsdHYumjD",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Correct assertion. First album is present the second is not.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Check user's saved albums Negative_test",
			"id": "4d2c70a8-6695-457f-8bf8-b77c8a7577d5",
			"url": "https://api.spotify.com/v1/me/albums/contains?contains=&ids=1JifWi3bCvGr7MsdHYumj,4acB71ZhsfYGdTdqdbpzL",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Error message is contained. Bad ids": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Remove Albums fro Current User",
			"id": "2e76dc5c-eece-44e1-bed8-2919d72703dd",
			"url": "https://api.spotify.com/v1/me/albums?ids=1SL2IdaCrXDtv695Px6AXR",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Remove Albums fro Current User Negative_Test",
			"id": "e87ecf82-c477-49bf-a7e8-0b8dff9434fc",
			"url": "https://api.spotify.com/v1/me/albums?ids=1JifWi3bCvGr7MsdHYumj,4acB71ZhsfYGdTdqdbpzL",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Error message is contained. Bad ids": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "25b57009-5b73-4545-8f14-ba17c712e0a4",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Save Tracks for User Positive test",
			"id": "e199775b-83e8-459b-acc5-5484d10b2de8",
			"url": "https://api.spotify.com/v1/me/tracks?ids=5hyb6e5o5dPm7wbUi5wlhb,0lqfBvf1Gqmmt3l5Qeirlm",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response 200. Response ok.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Save Tracks for User Negative test",
			"id": "9b768b8a-0766-4134-a374-e8aecba15176",
			"url": "https://api.spotify.com/v1/me/tracks?ids={{to_add_tracks_negative}}",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response 400. Response is correct.": {
					"pass": 1,
					"fail": 0
				},
				"Error message found in JSON response.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Save Albums for Current User Positive test",
			"id": "612b46eb-4960-4590-8dae-c53aa8ae0d75",
			"url": "https://api.spotify.com/v1/me/albums?ids=6R6nH5TVNEquzoNfqCPLaB,0O82niJ0NpcptYRxogeEZu",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response 200. Response ok.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Save Albums for Current Negative test",
			"id": "ee808df8-9cde-4b44-b200-d99db2b4d71d",
			"url": "https://api.spotify.com/v1/me/albums?ids={{save_album_ids_negative}}",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response 400. Response is correct.": {
					"pass": 1,
					"fail": 0
				},
				"Error message found in JSON response.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "User's Saved tracks",
			"id": "e6b6ad2b-8992-4df4-bae8-8e722c3c3fe9",
			"url": "https://api.spotify.com/v1/me/tracks?limit=10",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response 200. Response is correct.": {
					"pass": 1,
					"fail": 0
				},
				"The limit is set to 10.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "75e96392-155e-4601-8254-37e042a5d1ed",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Add_tracks_to_playlist",
			"id": "cb37c71c-1bef-494a-8994-6126618a3fd6",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Snapshot has been generated ==> POST was delivered successfully!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Add_tracks_to_playlist-Negative-test",
			"id": "8a683554-cc8e-4c01-a4f4-76c5f7203c66",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is correct, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Incorrect track URI detected. Error has been thrown.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Replace a playlist's tracks",
			"id": "4be240c1-3c7b-43ae-9a75-2a1de3f62808",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Snapshot has been generated ==> POST was delivered successfully!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Replace a playlist's tracks Negative_Test",
			"id": "1dd8980c-0293-47c0-abee-d533a2d402eb",
			"url": "https://api.spotify.com/v1/playlists/6LqFpWHSsAdMh6totpD3fi/tracks",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is correct, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Incorrect track URI detected. Error has been thrown.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "84af30a8-bd9c-4144-9d17-f031fbc04029",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Search for an item Positive-BVA_50_limit",
			"id": "9dcd512f-a6e5-4e23-a069-2a52151d6696",
			"url": "https://api.spotify.com/v1/search?q=joe satriani&type=album&market=RO&limit=50",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok. Code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Search for an item Negative-BVA_51_limit",
			"id": "093ab14e-8140-41a0-b7eb-c14391647ab0",
			"url": "https://api.spotify.com/v1/search?q=joe satriani&type=album&market=RO&limit=51",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok. Code 400": {
					"pass": 1,
					"fail": 0
				},
				"Response body contains the message Invalid limit.": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "ffe18c90-a8e8-4f9b-b240-9941d1862e04",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get audio analysis for a track",
			"id": "b421c325-1818-4630-90c7-4b1558b02d98",
			"url": "https://api.spotify.com/v1/audio-analysis/5hyb6e5o5dPm7wbUi5wlhb",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get audio features for a track",
			"id": "adf184e9-c91f-4e6e-8619-2a6a35030c75",
			"url": "https://api.spotify.com/v1/audio-features/0lqfBvf1Gqmmt3l5Qeirlm",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a track negative",
			"id": "12f9c584-8647-46d5-a0c2-8f113c07ddef",
			"url": "https://api.spotify.com/v1/tracks/invalid",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 400": {
					"pass": 1,
					"fail": 0
				},
				"Property is present": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Refresh_token",
			"id": "45621733-c21e-435d-afb1-5c189af3bf9e",
			"url": "https://accounts.spotify.com/api/token",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Response is ok, status code 200": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get current user's profile",
			"id": "ed0a5a5c-01f1-4380-80cd-e54dd991c974",
			"url": "https://api.spotify.com/v1/me",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"The current user's profile, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"The current user was shown!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a user's profile",
			"id": "bb6888d4-bb4d-46f8-a28d-d31e848135a4",
			"url": "https://api.spotify.com/v1/users/winterlord22",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"The user's profile, status code 200": {
					"pass": 1,
					"fail": 0
				},
				"The user was shown!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get a user's profile negative",
			"id": "5c7cf4c9-31e2-4d21-b6ef-6628958601f9",
			"url": "https://api.spotify.com/v1/users/winterlord22",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 401,
				"name": "Unauthorized",
				"detail": {
					"name": "Unauthorized",
					"detail": "Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource."
				}
			},
			"testPassFailCounts": {
				"The user's profile, status code 401": {
					"pass": 1,
					"fail": 0
				},
				"The user was not shown!": {
					"pass": 1,
					"fail": 0
				}
			}
		},
		{
			"name": "Get current user's profile negative",
			"id": "dd3938b6-8bc4-4adb-8916-8eaa438e4ad4",
			"url": "https://api.spotify.com/v1/me",
			"time": "2019-10-15T10:57:16.222Z",
			"responseCode": {
				"code": 401,
				"name": "Unauthorized",
				"detail": {
					"name": "Unauthorized",
					"detail": "Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource."
				}
			},
			"testPassFailCounts": {
				"The current user's profile, status code 401": {
					"pass": 1,
					"fail": 0
				},
				"The current user was not shown!": {
					"pass": 1,
					"fail": 0
				}
			}
		}
	],
	"synced": false
}